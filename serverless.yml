service: velo-sync-lambda-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 30
  region: ap-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:ListObjects
            - lambda:InvokeFunction
          Resource: '*'

functions:
  app:
    handler: index.handler
    name: velo-sync-lambda-app-${sls:stage}
    events:
      - httpApi:
          method: GET
          path: /status
      - httpApi:
          method: POST
          path: /s3/generate-signed-url
      - httpApi:
          method: POST
          path: /video/process

resources:
  Resources:
    VeloSyncVideoProcessTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: velo-sync-video-process-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
    VeloSyncStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: velo-sync-storage-bucket-${sls:stage}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              MaxAge: 3000